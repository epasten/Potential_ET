"""
DELTA CHANGE BIAS CORRECTION
THIS SCRIPT GETS THE CORRECTION FACTORS AND SAVES THEM AS NPY FILE FOR
TAS, TASMAX, TASMIN, SUND, HURS AND SFCWIND

Reference period is 1976 to 2005 ==> This is where the relationship is obtained

france has 5x5 grid cells. it has to be run alone
"""


import pandas as pd
import numpy as np
import netCDF4 as nc 
import math
import datetime
import os
import matplotlib.pyplot as plt
import sys



#Set the list of models

dates = pd.read_excel('C:/Users/epz/Desktop/UEF/PET/Python/dates1971.xlsx')
month = dates.Month
year = dates.Year
julian_days = dates. Julian
julian_days = np.array(julian_days)
dates_no_leap = pd.read_excel('C:/Users/epz/Desktop/UEF/PET/Python/dates1971_noleap.xlsx')
month_noleap = dates_no_leap.Month 
year_noleap = dates_no_leap.Year
julian_days_no_leap = dates_no_leap.Julian
y_grid = np.arange(0,6)
x_grid = np.arange(0,6)
julian_days_n = np.arange(0,len(julian_days))

sites_list = ['at','dk','dl','fi','fr','gr','it','ro','sp','uk']

if not sys.warnoptions:
    import warnings
    warnings.simplefilter("ignore")
    
for n_site in np.arange(5,10): # change here based on the site to be corrected
    print('Processing data for ', sites_list[n_site])
    # Import data from the RCM, setting up the models
    tas_list = [filename for filename in os.listdir('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/') if filename.startswith('tas_EUR') and filename.endswith('all.nc')]
    tasmax_list = [filename for filename in os.listdir('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/') if filename.startswith('tasmax_EUR') and filename.endswith('all.nc')]
    tasmin_list = [filename for filename in os.listdir('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/') if filename.startswith('tasmin_EUR') and filename.endswith('all.nc')]
    sfcWind_list = [filename for filename in os.listdir('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/') if filename.startswith('sfcWind_EUR') and filename.endswith('all.nc')]
    orog_list = [filename for filename in os.listdir('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/') if filename.startswith('orog_EUR')]
    sund_list = [filename for filename in os.listdir('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/') if filename.startswith('sund_EUR') and filename.endswith('all.nc')]
    hurs_list = [filename for filename in os.listdir('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/') if filename.startswith('hurs_EUR') and filename.endswith('all.nc')]
    
    print('tas models:',len(tas_list))
    print('tasmax models:',len(tasmax_list))
    print('tasmin models:',len(tasmin_list))
    print('sfcWnd models:',len(sfcWind_list))
    print('orog models:',len(orog_list))
    print('sund models:',len(sund_list))
    print('hurs models:',len(hurs_list))
        
    # The data for each site will be saved here
    tas_ref_month=np.zeros([36,10,12]) # row = gridcell; column = CM; z = month, one file will be saved for each year site
    tasmax_ref_month=np.zeros([36,10,12])
    tasmin_ref_month=np.zeros([36,10,12])
    sfcWind_ref_month=np.zeros([36,10,12])
    sund_ref_month=np.zeros([36,10,12])
    hurs_ref_month=np.zeros([36,10,12])
    
    print('Estimating deltas...')
    for i in np.arange(0,7):#i is climate model 
    
        file_tas = tas_list[i]
        tas_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_tas)
        rcm_tas = tas_model.variables['tas'][:,:,:]
        tas_model.close()
        file_tasmax = tasmax_list[i]
        tasmax_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_tasmax)
        rcm_tasmax = tasmax_model.variables['tasmax'][:,:,:]
        file_tasmin = tasmin_list[i]
        tasmin_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_tasmin)
        rcm_tasmin = tasmin_model.variables['tasmin'][:,:,:]
        file_sfcWind = sfcWind_list[i]
        sfcWind_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_sfcWind)
        rcm_sfcWind = sfcWind_model.variables['sfcWind'][:,:,:]
        file_sund = sund_list[i]
        sund_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_sund)
        rcm_sund = sund_model.variables['sund'][:,:,:]
        file_hurs = hurs_list[i]
        hurs_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_hurs)
        rcm_hurs = hurs_model.variables['hurs'][:,:,:]
        
        ref_yrs = year[(year >= 1976) & (year <= 2005)]
        ref_months = month[(year >= 1976) & (year <= 2005)]
        tas_ref_all_cells = rcm_tas[(year >= 1976) & (year <= 2005)]
        tas_ref=np.zeros([len(ref_yrs)])
        tasmax_ref_all_cells = rcm_tasmax[(year >= 1976) & (year <= 2005)]
        tasmax_ref=np.zeros([len(ref_yrs)])
        tasmin_ref_all_cells = rcm_tasmin[(year >= 1976) & (year <= 2005)]
        tasmin_ref=np.zeros([len(ref_yrs)])
        sfcWind_ref_all_cells = rcm_sfcWind[(year >= 1976) & (year <= 2005)]
        sfcWind_ref=np.zeros([len(ref_yrs)])
        sund_ref_all_cells = rcm_sund[(year >= 1976) & (year <= 2005)]
        sund_ref=np.zeros([len(ref_yrs)])
        hurs_ref_all_cells = rcm_hurs[(year >= 1976) & (year <= 2005)]
        hurs_ref=np.zeros([len(ref_yrs)])
        

        ## Now, extracts the data for each month in the reference period and gets its mean for each CM and stores it
        
        
        for n_month in np.arange(1,13):# i sets the value for each climate model to be used as the reference
            tas_ref_month_all = tas_ref_all_cells[ref_months==n_month]
            tasmax_ref_month_all = tasmax_ref_all_cells[ref_months==n_month]
            tasmin_ref_month_all = tasmin_ref_all_cells[ref_months==n_month]
            sfcWind_ref_month_all = sfcWind_ref_all_cells[ref_months==n_month]
            sund_ref_month_all = sund_ref_all_cells[ref_months==n_month]
            hurs_ref_month_all = hurs_ref_all_cells[ref_months==n_month]
            
            for latg in np.arange(0,6): #latitude gridcells
                for long in np.arange(0,6): # longitude gridcalls
                    cell_index = latg*6+long #set the cell index
                    #print(cell_index)
                    tas_ref_month[cell_index,i,n_month-1] = (np.mean(tas_ref_month_all[:,latg,long]))-273.15
                    tasmax_ref_month[cell_index,i,n_month-1] = (np.mean(tasmax_ref_month_all[:,latg,long]))-273.15
                    tasmin_ref_month[cell_index,i,n_month-1] = (np.mean(tasmin_ref_month_all[:,latg,long]))-273.15
                    sfcWind_ref_month[cell_index,i,n_month-1] = (np.mean(sfcWind_ref_month_all[:,latg,long]))
                    sund_ref_month[cell_index,i,n_month-1] = (np.mean(sund_ref_month_all[:,latg,long]))
                    hurs_ref_month[cell_index,i,n_month-1] = (np.mean(hurs_ref_month_all[:,latg,long]))
       
       
    for i in np.arange(7,10):#i is climate model 
    
        file_tas = tas_list[i]
        tas_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_tas)
        rcm_tas = tas_model.variables['tas'][:,:,:]
        tas_model.close()
        file_tasmax = tasmax_list[i]
        tasmax_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_tasmax)
        rcm_tasmax = tasmax_model.variables['tasmax'][:,:,:]
        file_tasmin = tasmin_list[i]
        tasmin_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_tasmin)
        rcm_tasmin = tasmin_model.variables['tasmin'][:,:,:]
        file_sfcWind = sfcWind_list[i]
        sfcWind_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_sfcWind)
        rcm_sfcWind = sfcWind_model.variables['sfcWind'][:,:,:]
        file_sund = sund_list[i]
        sund_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_sund)
        rcm_sund = sund_model.variables['sund'][:,:,:]
        file_hurs = hurs_list[i]
        hurs_model = nc.Dataset('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/'+file_hurs)
        rcm_hurs = hurs_model.variables['hurs'][:,:,:]
        
        ref_yrs = year_noleap[(year_noleap >= 1976) & (year_noleap <= 2005)]
        ref_months = month_noleap[(year_noleap >= 1976) & (year_noleap <= 2005)]
        tas_ref_all_cells = rcm_tas[(year_noleap >= 1976) & (year_noleap <= 2005)]
        tas_ref=np.zeros([len(ref_yrs)])
        tasmax_ref_all_cells = rcm_tasmax[(year_noleap >= 1976) & (year_noleap <= 2005)]
        tasmax_ref=np.zeros([len(ref_yrs)])
        tasmin_ref_all_cells = rcm_tasmin[(year_noleap >= 1976) & (year_noleap <= 2005)]
        tasmin_ref=np.zeros([len(ref_yrs)])
        sfcWind_ref_all_cells = rcm_sfcWind[(year_noleap >= 1976) & (year_noleap <= 2005)]
        sfcWind_ref=np.zeros([len(ref_yrs)])
        sund_ref_all_cells = rcm_sund[(year_noleap >= 1976) & (year_noleap <= 2005)]
        sund_ref=np.zeros([len(ref_yrs)])
        hurs_ref_all_cells = rcm_hurs[(year_noleap >= 1976) & (year_noleap <= 2005)]
        hurs_ref=np.zeros([len(ref_yrs)])
        
        ### tas
        # Need monthly means for all models, in a monthly matrix?, 
        # so matrix is: row = gridcell, col = CM, with the mean values.   
        # then do the mean adjustmenst per day using this change factor as:
        # for all days in month x, the correciton factor is y

        ## Now, extracts the data for each month in the reference period and gets its mean for each CM and stores it
        
        
        for n_month in np.arange(1,13):# i sets the value for each climate model to be used as the reference
            tas_ref_month_all = tas_ref_all_cells[ref_months==n_month]
            tasmax_ref_month_all = tasmax_ref_all_cells[ref_months==n_month]
            tasmin_ref_month_all = tasmin_ref_all_cells[ref_months==n_month]
            sfcWind_ref_month_all = sfcWind_ref_all_cells[ref_months==n_month]
            sund_ref_month_all = sund_ref_all_cells[ref_months==n_month]
            hurs_ref_month_all = hurs_ref_all_cells[ref_months==n_month]
            
            for latg in np.arange(0,6): #latitude gridcells
                for long in np.arange(0,6): # longitude gridcalls
                    cell_index = latg*6+long #set the cell index
                    #print(cell_index)
                    tas_ref_month[cell_index,i,n_month-1] = (np.mean(tas_ref_month_all[:,latg,long]))-273.15
                    tasmax_ref_month[cell_index,i,n_month-1] = (np.mean(tasmax_ref_month_all[:,latg,long]))-273.15
                    tasmin_ref_month[cell_index,i,n_month-1] = (np.mean(tasmin_ref_month_all[:,latg,long]))-273.15
                    sfcWind_ref_month[cell_index,i,n_month-1] = (np.mean(sfcWind_ref_month_all[:,latg,long]))
                    sund_ref_month[cell_index,i,n_month-1] = (np.mean(sund_ref_month_all[:,latg,long]))
                    hurs_ref_month[cell_index,i,n_month-1] = (np.mean(hurs_ref_month_all[:,latg,long]))
    
    
        # Now Using one model as reference and correcting the remaining models:
        # delta is obtained as: model - reference
        correction_deltas_tas = np.zeros([36,10,12])
        correction_deltas_tasmax = np.zeros([36,10,12])
        correction_deltas_tasmin = np.zeros([36,10,12])
        correction_deltas_sfcWind = np.zeros([36,10,12])
        correction_deltas_sund = np.zeros([36,10,12])
        correction_deltas_hurs = np.zeros([36,10,12])
        for ref_mod in np.arange(0,10): #reference model
            for corr_mod in np.arange(0,10): #correcting all models
                for n_month in np.arange(0,12):#for each month
                    correction_deltas_tas[:,corr_mod,n_month] = tas_ref_month[:,corr_mod,n_month]-tas_ref_month[:,ref_mod,n_month]
                    correction_deltas_tasmax[:,corr_mod,n_month] = tasmax_ref_month[:,corr_mod,n_month]-tasmax_ref_month[:,ref_mod,n_month]
                    correction_deltas_tasmin[:,corr_mod,n_month] = tasmin_ref_month[:,corr_mod,n_month]-tasmin_ref_month[:,ref_mod,n_month]
                    correction_deltas_sund[:,corr_mod,n_month] = sund_ref_month[:,corr_mod,n_month]-sund_ref_month[:,ref_mod,n_month]
                    correction_deltas_hurs[:,corr_mod,n_month] = hurs_ref_month[:,corr_mod,n_month]-hurs_ref_month[:,ref_mod,n_month]
                    correction_deltas_sfcWind[:,corr_mod,n_month] = sfcWind_ref_month[:,corr_mod,n_month]-sfcWind_ref_month[:,ref_mod,n_month]
            
            np.save('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/pet/delta/tas_correction_deltas_ref'+str(ref_mod),correction_deltas_tas)
            np.save('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/pet/delta/tasmax_correction_deltas_ref'+str(ref_mod),correction_deltas_tasmax)
            np.save('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/pet/delta/tasmin_correction_deltas_ref'+str(ref_mod),correction_deltas_tasmin)
            np.save('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/pet/delta/sfcWind_correction_deltas_ref'+str(ref_mod),correction_deltas_sfcWind)
            np.save('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/pet/delta/sund_correction_deltas_ref'+str(ref_mod),correction_deltas_sund)
            np.save('C:/Users/epz/Desktop/UEF/PET/CMs/'+sites_list[n_site]+'/pet/delta/hurs_correction_deltas_ref'+str(ref_mod),correction_deltas_hurs)
            

    print('Estimaion of correction deltas done and saved')           
                
